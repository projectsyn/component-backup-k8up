/**
 * Adjust Deployment generated by helm template:
 * * Remove any env variables with value = null
 * * Remove any global config global backup config is disabled or no global
 *   bucket provided.
 */
local com = import 'lib/commodore.libjsonnet';
local kube = import 'lib/kube.libjsonnet';

local inv = com.inventory();
local params = inv.parameters.backup_k8up;

local chart_output_dir = std.extVar('output_path');

local list_dir(dir, basename=true) =
  std.native('list_dir')(dir, basename);

local chart_files = list_dir(chart_output_dir);

local input_file(elem) = chart_output_dir + '/' + elem;
local stem(elem) =
  local elems = std.split(elem, '.');
  std.join('.', elems[:std.length(elems) - 1]);


local want_global_config = params.global_backup_config.enabled &&
                           params.global_backup_config.s3_endpoint != null;

local prune_env(deploy) =
  local env = deploy.spec.template.spec.containers[0].env;
  local env_no_global_config =
    std.prune([
      if !want_global_config && std.startsWith(e.name, 'BACKUP_GLOBAL') then
        null
      else e
      for e in env
    ]);
  local fixed_env =
    std.prune([ if std.length(e) > 1 then e for e in env_no_global_config ]);
  deploy {
    spec+: {
      template+: {
        spec+: {
          containers: [
            deploy.spec.template.spec.containers[0] {
              env: fixed_env,
            },
          ],
        },
      },
    },
  };

local fixup_obj(obj) =
  if obj.kind == 'Deployment' then
    prune_env(obj)
  else
    obj;

local fixup(obj_file) =
  local objs = std.prune(com.yaml_load_all(obj_file));
  // process all objs
  [ fixup_obj(obj) for obj in objs ];

{
  [stem(elem)]: fixup(input_file(elem))
  for elem in chart_files
}
